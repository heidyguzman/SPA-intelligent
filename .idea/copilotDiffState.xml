<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/narmocorp/satorispa/controller/logincontroller.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/narmocorp/satorispa/controller/logincontroller.kt" />
              <option name="originalContent" value="package com.narmocorp.satorispa.controller&#10;&#10;import androidx.navigation.NavController&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;&#10;fun loginUser(&#10;    email: String,&#10;    password: String,&#10;    navController: NavController,&#10;    onLoginError: (String) -&gt; Unit&#10;) {&#10;    if (email.isBlank() || password.isBlank()) {&#10;        onLoginError(&quot;El correo y la contraseña no pueden estar vacíos.&quot;)&#10;        return&#10;    }&#10;&#10;    val auth = FirebaseAuth.getInstance()&#10;    val db = FirebaseFirestore.getInstance()&#10;&#10;    auth.signInWithEmailAndPassword(email, password)&#10;        .addOnCompleteListener { task -&gt;&#10;            if (task.isSuccessful) {&#10;                val user = auth.currentUser&#10;                if (user != null) {&#10;                    db.collection(&quot;usuarios&quot;).document(user.uid)&#10;                        .get()&#10;                        .addOnSuccessListener { document -&gt;&#10;                            if (document != null &amp;&amp; document.exists()) {&#10;                                val rol = document.getString(&quot;rol&quot;)&#10;                                if (rol == &quot;cliente&quot;) {&#10;                                    navController.navigate(&quot;cliente_home&quot;) {&#10;                                        popUpTo(&quot;login&quot;) { inclusive = true }&#10;                                    }&#10;                                } else if (rol == &quot;terapeuta&quot;) {&#10;                                    navController.navigate(&quot;terapeuta_home&quot;) {&#10;                                        popUpTo(&quot;login&quot;) { inclusive = true }&#10;                                    }&#10;                                } else {&#10;                                    onLoginError(&quot;Rol de usuario no reconocido.&quot;)&#10;                                }&#10;                            } else {&#10;                                onLoginError(&quot;No se encontró el usuario en la base de datos.&quot;)&#10;                            }&#10;                        }&#10;                        .addOnFailureListener { e -&gt;&#10;                            onLoginError(&quot;Error al obtener datos del usuario: ${e.message}&quot;)&#10;                        }&#10;                }&#10;            } else {&#10;                onLoginError(&quot;Error de autenticación: ${task.exception?.message}&quot;)&#10;            }&#10;        }&#10;}" />
              <option name="updatedContent" value="package com.narmocorp.satorispa.controller&#10;&#10;import android.util.Log&#10;import androidx.navigation.NavController&#10;import com.google.firebase.auth.FirebaseAuth&#10;import com.google.firebase.firestore.FirebaseFirestore&#10;&#10;private const val TAG = &quot;LoginController&quot;&#10;&#10;fun loginUser(&#10;    email: String,&#10;    password: String,&#10;    navController: NavController,&#10;    onLoginError: (String) -&gt; Unit&#10;) {&#10;    if (email.isBlank() || password.isBlank()) {&#10;        onLoginError(&quot;El correo y la contraseña no pueden estar vacíos.&quot;)&#10;        return&#10;    }&#10;&#10;    val auth = FirebaseAuth.getInstance()&#10;    val db = FirebaseFirestore.getInstance()&#10;&#10;    auth.signInWithEmailAndPassword(email, password)&#10;        .addOnCompleteListener { task -&gt;&#10;            if (task.isSuccessful) {&#10;                val user = auth.currentUser&#10;                Log.d(TAG, &quot;signInWithEmailAndPassword successful. currentUser=$user&quot;)&#10;                if (user != null) {&#10;                    val uid = user.uid&#10;                    Log.d(TAG, &quot;Authenticated user uid=$uid&quot;)&#10;                    db.collection(&quot;usuarios&quot;).document(uid)&#10;                        .get()&#10;                        .addOnSuccessListener { document -&gt;&#10;                            Log.d(TAG, &quot;Firestore get() success for uid=$uid; exists=${document?.exists()}&quot;)&#10;                            if (document != null &amp;&amp; document.exists()) {&#10;                                val dataMap = document.data&#10;                                Log.d(TAG, &quot;Documento data=$dataMap&quot;)&#10;                                val rolRaw = document.getString(&quot;rol&quot;)&#10;                                Log.d(TAG, &quot;rol raw='$rolRaw'&quot;)&#10;                                val rol = rolRaw?.trim()?.lowercase()&#10;                                if (rol == &quot;cliente&quot;) {&#10;                                    navController.navigate(&quot;cliente_home&quot;) {&#10;                                        popUpTo(&quot;login&quot;) { inclusive = true }&#10;                                    }&#10;                                } else if (rol == &quot;terapeuta&quot;) {&#10;                                    navController.navigate(&quot;terapeuta_home&quot;) {&#10;                                        popUpTo(&quot;login&quot;) { inclusive = true }&#10;                                    }&#10;                                } else {&#10;                                    val dataStr = document.data?.toString() ?: &quot;(sin datos)&quot;&#10;                                    val msg = &quot;Rol de usuario no reconocido. Valor guardado: '$rolRaw'. Documento: $dataStr&quot;&#10;                                    Log.d(TAG, msg)&#10;                                    onLoginError(msg)&#10;                                }&#10;                            } else {&#10;                                val msg = &quot;No se encontró el usuario en la base de datos. uid=$uid&quot;&#10;                                Log.d(TAG, msg)&#10;                                onLoginError(msg)&#10;                            }&#10;                        }&#10;                        .addOnFailureListener { e -&gt;&#10;                            val msg = &quot;Error al obtener datos del usuario: ${e.message}&quot;&#10;                            Log.e(TAG, msg, e)&#10;                            onLoginError(msg)&#10;                        }&#10;                } else {&#10;                    val msg = &quot;Usuario autenticado pero currentUser es null.&quot;&#10;                    Log.d(TAG, msg)&#10;                    onLoginError(msg)&#10;                }&#10;            } else {&#10;                val msg = &quot;Error de autenticación: ${task.exception?.message}&quot;&#10;                Log.d(TAG, msg, task.exception)&#10;                onLoginError(msg)&#10;            }&#10;        }&#10;        .addOnFailureListener { e -&gt;&#10;            val msg = &quot;Error al conectar con el servicio de autenticación: ${e.message}&quot;&#10;            Log.e(TAG, msg, e)&#10;            onLoginError(msg)&#10;        }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>