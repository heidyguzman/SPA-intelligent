<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Bienvenida.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Bienvenida.kt" />
              <option name="updatedContent" value="// ...existing imports...&#10;&#10;@Composable&#10;fun Bienvenida(modifier: Modifier = Modifier) {&#10;    Box(&#10;        modifier = modifier&#10;            .requiredWidth(width = 412.dp)&#10;            .requiredHeight(height = 917.dp)&#10;    ) {&#10;        // ...existing code...&#10;        // Reemplaza el logo por el nuevo diseño&#10;        Image(&#10;            painter = painterResource(id = R.drawable.nuevo_logo),&#10;            contentDescription = &quot;nuevo logo&quot;,&#10;            contentScale = ContentScale.Crop,&#10;            modifier = Modifier&#10;                .align(alignment = Alignment.TopStart)&#10;                .offset(x = 86.dp, y = 64.dp)&#10;                .requiredWidth(width = 239.dp)&#10;                .requiredHeight(height = 190.dp)&#10;        )&#10;        // Reemplaza el botón por el nuevo diseño&#10;        Box(&#10;            modifier = Modifier&#10;                .align(alignment = Alignment.TopStart)&#10;                .offset(x = 106.dp, y = 730.dp)&#10;                .requiredWidth(width = 230.dp)&#10;                .requiredHeight(height = 73.dp)&#10;        ) {&#10;            // Fondo del botón como imagen&#10;            Image(&#10;                painter = painterResource(id = R.drawable.boton_nuevo),&#10;                contentDescription = &quot;botón nuevo&quot;,&#10;                contentScale = ContentScale.FillBounds,&#10;                modifier = Modifier&#10;                    .requiredWidth(width = 230.dp)&#10;                    .requiredHeight(height = 73.dp)&#10;                    .clip(RoundedCornerShape(30.dp))&#10;            )&#10;            // Texto centrado encima del botón&#10;            Text(&#10;                text = &quot;Iniciar&quot;,&#10;                color = Color.White,&#10;                lineHeight = 1.27.em,&#10;                style = AppTypes.type_M3_title_large,&#10;                modifier = Modifier&#10;                    .align(Alignment.Center)&#10;            )&#10;        }&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/narmocorp/satorispa/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/narmocorp/satorispa/MainActivity.kt" />
              <option name="originalContent" value="package com.narmocorp.satorispa&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.narmocorp.satorispa.ui.theme.SATORISPATheme&#10;import com.narmocorp.satorispa.views.Login&#10;import com.narmocorp.satorispa.views.StartScreen&#10;import com.narmocorp.satorispa.views.Inicio&#10;import com.narmocorp.satorispa.api.ApiService&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import androidx.compose.runtime.*&#10;import com.narmocorp.satorispa.api.RetrofitClient&#10;import com.narmocorp.satorispa.models.LoginRequest&#10;import com.narmocorp.satorispa.controllers.LoginController&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            SATORISPATheme {&#10;                val navController = rememberNavController()&#10;&#10;                NavHost(navController = navController, startDestination = &quot;start&quot;) {&#10;                    composable(&quot;start&quot;) {&#10;                        StartScreen(&#10;                            onLoginClick = { navController.navigate(&quot;login&quot;) },&#10;                            onRegisterClick = { navController.navigate(&quot;register&quot;) }&#10;                        )&#10;                    }&#10;                    composable(&quot;login&quot;) {&#10;                        Login(&#10;                            label1901 = &quot;Correo electrónico&quot;,&#10;                            onLogin = { correo, contrasena -&gt;&#10;                                lifecycleScope.launch {&#10;                                    try {&#10;                                        val usuario = LoginController.loginUser(correo, contrasena)&#10;                                        if (usuario != null) {&#10;                                            Toast.makeText(&#10;                                                applicationContext,&quot;Login exitoso: ${usuario.nombre}&quot;,&#10;                                                Toast.LENGTH_LONG&#10;                                            ).show()&#10;                                            Log.d(&quot;MainActivity&quot;, &quot;Usuario: $usuario&quot;)&#10;                                            navController.navigate(&quot;inicio&quot;)&#10;                                        } else {&#10;                                            Toast.makeText(&#10;                                                applicationContext, &quot;Error en el login&quot;,&#10;                                                Toast.LENGTH_LONG&#10;                                            ).show()&#10;                                            Log.d(&quot;MainActivity&quot;, &quot;Error en el login&quot;)&#10;                                        }&#10;                                    } catch (e: Exception) {&#10;                                        println(&quot;Excepción durante el login: ${e.message}&quot;)&#10;                                    }&#10;                                }&#10;&#10;                            }&#10;                        )&#10;                    }&#10;                    composable(&quot;inicio&quot;) {&#10;                        Inicio()&#10;                    }&#10;                    composable(&quot;register&quot;) {&#10;                        com.narmocorp.satorispa.views.Register(navController = navController)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.narmocorp.satorispa&#10;&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.narmocorp.satorispa.ui.theme.SATORISPATheme&#10;import com.narmocorp.satorispa.views.Login&#10;import com.narmocorp.satorispa.views.StartScreen&#10;import com.narmocorp.satorispa.views.Inicio&#10;import com.narmocorp.satorispa.api.ApiService&#10;import kotlinx.coroutines.Dispatchers&#10;import kotlinx.coroutines.launch&#10;import kotlinx.coroutines.withContext&#10;import retrofit2.Retrofit&#10;import retrofit2.converter.gson.GsonConverterFactory&#10;import androidx.compose.runtime.*&#10;import com.narmocorp.satorispa.api.RetrofitClient&#10;import com.narmocorp.satorispa.models.LoginRequest&#10;import com.narmocorp.satorispa.controllers.LoginController&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            SATORISPATheme {&#10;                val navController = rememberNavController()&#10;&#10;                NavHost(navController = navController, startDestination = &quot;start&quot;) {&#10;                    composable(&quot;start&quot;) {&#10;                        StartScreen(&#10;                            onLoginClick = { navController.navigate(&quot;login&quot;) },&#10;                            onRegisterClick = { navController.navigate(&quot;register&quot;) }&#10;                        )&#10;                    }&#10;                    composable(&quot;login&quot;) {&#10;                        Login(&#10;                            label1901 = &quot;Correo electrónico&quot;,&#10;                            onLogin = { correo, contrasena -&gt;&#10;                                lifecycleScope.launch {&#10;                                    try {&#10;                                        val usuario = LoginController.loginUser(correo, contrasena)&#10;                                        if (usuario != null) {&#10;                                            Toast.makeText(&#10;                                                applicationContext,&quot;Login exitoso: ${usuario.nombre}&quot;,&#10;                                                Toast.LENGTH_LONG&#10;                                            ).show()&#10;                                            Log.d(&quot;MainActivity&quot;, &quot;Usuario: $usuario&quot;)&#10;                                            navController.navigate(&quot;inicio&quot;)&#10;                                        } else {&#10;                                            Toast.makeText(&#10;                                                applicationContext, &quot;Error en el login&quot;,&#10;                                                Toast.LENGTH_LONG&#10;                                            ).show()&#10;                                            Log.d(&quot;MainActivity&quot;, &quot;Error en el login&quot;)&#10;                                        }&#10;                                    } catch (e: Exception) {&#10;                                        println(&quot;Excepción durante el login: ${e.message}&quot;)&#10;                                    }&#10;                                }&#10;&#10;                            },&#10;                            navController = navController // Se pasa el navController&#10;                        )&#10;                    }&#10;                    composable(&quot;inicio&quot;) {&#10;                        Inicio()&#10;                    }&#10;                    composable(&quot;register&quot;) {&#10;                        com.narmocorp.satorispa.views.Register(navController = navController)&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>