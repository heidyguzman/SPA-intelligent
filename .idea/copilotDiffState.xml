<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Bienvenida.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Bienvenida.kt" />
              <option name="updatedContent" value="// ...existing imports...&#10;&#10;@Composable&#10;fun Bienvenida(modifier: Modifier = Modifier) {&#10;    Box(&#10;        modifier = modifier&#10;            .requiredWidth(width = 412.dp)&#10;            .requiredHeight(height = 917.dp)&#10;    ) {&#10;        // ...existing code...&#10;        // Reemplaza el logo por el nuevo diseño&#10;        Image(&#10;            painter = painterResource(id = R.drawable.nuevo_logo),&#10;            contentDescription = &quot;nuevo logo&quot;,&#10;            contentScale = ContentScale.Crop,&#10;            modifier = Modifier&#10;                .align(alignment = Alignment.TopStart)&#10;                .offset(x = 86.dp, y = 64.dp)&#10;                .requiredWidth(width = 239.dp)&#10;                .requiredHeight(height = 190.dp)&#10;        )&#10;        // Reemplaza el botón por el nuevo diseño&#10;        Box(&#10;            modifier = Modifier&#10;                .align(alignment = Alignment.TopStart)&#10;                .offset(x = 106.dp, y = 730.dp)&#10;                .requiredWidth(width = 230.dp)&#10;                .requiredHeight(height = 73.dp)&#10;        ) {&#10;            // Fondo del botón como imagen&#10;            Image(&#10;                painter = painterResource(id = R.drawable.boton_nuevo),&#10;                contentDescription = &quot;botón nuevo&quot;,&#10;                contentScale = ContentScale.FillBounds,&#10;                modifier = Modifier&#10;                    .requiredWidth(width = 230.dp)&#10;                    .requiredHeight(height = 73.dp)&#10;                    .clip(RoundedCornerShape(30.dp))&#10;            )&#10;            // Texto centrado encima del botón&#10;            Text(&#10;                text = &quot;Iniciar&quot;,&#10;                color = Color.White,&#10;                lineHeight = 1.27.em,&#10;                style = AppTypes.type_M3_title_large,&#10;                modifier = Modifier&#10;                    .align(Alignment.Center)&#10;            )&#10;        }&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/narmocorp/satorispa/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/narmocorp/satorispa/MainActivity.kt" />
              <option name="originalContent" value="package com.narmocorp.satorispa&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.runtime.*&#10;import androidx.biometric.BiometricManager&#10;import androidx.biometric.BiometricManager.Authenticators.BIOMETRIC_STRONG&#10;import androidx.biometric.BiometricManager.Authenticators.DEVICE_CREDENTIAL&#10;import androidx.biometric.BiometricPrompt&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.content.edit&#10;import androidx.fragment.app.FragmentActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.google.gson.Gson&#10;import com.narmocorp.satorispa.controllers.LoginController&#10;import com.narmocorp.satorispa.models.Usuario&#10;import com.narmocorp.satorispa.ui.theme.SATORISPATheme&#10;import com.narmocorp.satorispa.views.Inicio&#10;import com.narmocorp.satorispa.views.Login&#10;import com.narmocorp.satorispa.views.StartScreen&#10;import com.narmocorp.satorispa.views.Notifications&#10;import com.narmocorp.satorispa.views.Register&#10;import kotlinx.coroutines.launch&#10;import java.util.concurrent.Executor&#10;&#10;class MainActivity : FragmentActivity() {&#10;&#10;    private lateinit var executor: Executor&#10;&#10;    private fun showBiometricPrompt(&#10;        onSuccess: (BiometricPrompt.AuthenticationResult) -&gt; Unit,&#10;        onError: (Int, CharSequence) -&gt; Unit,&#10;        onFailed: () -&gt; Unit&#10;    ) {&#10;        val biometricManager = BiometricManager.from(this)&#10;        if (biometricManager.canAuthenticate(BIOMETRIC_STRONG or DEVICE_CREDENTIAL) != BiometricManager.BIOMETRIC_SUCCESS) {&#10;            onError(-1, &quot;No hay hardware de biometría disponible&quot;)&#10;            return&#10;        }&#10;&#10;        val promptInfo = BiometricPrompt.PromptInfo.Builder()&#10;            .setTitle(&quot;Inicio de sesión biométrico&quot;)&#10;            .setSubtitle(&quot;Inicia sesión con tu huella digital&quot;)&#10;            .setNegativeButtonText(&quot;Usar contraseña&quot;)&#10;            .build()&#10;&#10;        val biometricPrompt = BiometricPrompt(this, executor,&#10;            object : BiometricPrompt.AuthenticationCallback() {&#10;                override fun onAuthenticationError(errorCode: Int, errString: CharSequence) {&#10;                    super.onAuthenticationError(errorCode, errString)&#10;                    onError(errorCode, errString)&#10;                }&#10;&#10;                override fun onAuthenticationSucceeded(result: BiometricPrompt.AuthenticationResult) {&#10;                    super.onAuthenticationSucceeded(result)&#10;                    onSuccess(result)&#10;                }&#10;&#10;                override fun onAuthenticationFailed() {&#10;                    super.onAuthenticationFailed()&#10;                    onFailed()&#10;                }&#10;            })&#10;&#10;        biometricPrompt.authenticate(promptInfo)&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        executor = ContextCompat.getMainExecutor(this)&#10;&#10;        val sharedPreferences = getSharedPreferences(&quot;SatoriSPA_prefs&quot;, Context.MODE_PRIVATE)&#10;        val gson = Gson()&#10;        val userJson = sharedPreferences.getString(&quot;usuario&quot;, null)&#10;        val savedUser = userJson?.let { gson.fromJson(it, Usuario::class.java) }&#10;&#10;        setContent {&#10;            SATORISPATheme {&#10;                val navController = rememberNavController()&#10;                var usuarioLogueado by remember { mutableStateOf(savedUser) }&#10;&#10;                NavHost(&#10;                    navController = navController,&#10;                    startDestination = &quot;start&quot;,&#10;                ) {&#10;                    composable(&quot;start&quot;) {&#10;                        StartScreen(&#10;                            onLoginClick = {&#10;                                // FUNCIONALIDAD DE TU COMPAÑERO: Biometría si ya hay usuario guardado&#10;                                if (usuarioLogueado != null) {&#10;                                    showBiometricPrompt(&#10;                                        onSuccess = { _ -&gt;&#10;                                            navController.navigate(&quot;inicio&quot;) {&#10;                                                popUpTo(&quot;start&quot;) { inclusive = true }&#10;                                            }&#10;                                        },&#10;                                        onError = { errorCode, errString -&gt;&#10;                                            Log.d(&quot;BiometricError&quot;, &quot;Code: $errorCode, Msg: $errString&quot;)&#10;                                            navController.navigate(&quot;login&quot;)&#10;                                        },&#10;                                        onFailed = {&#10;                                            Toast.makeText(&#10;                                                this@MainActivity,&#10;                                                &quot;Huella no reconocida&quot;,&#10;                                                Toast.LENGTH_SHORT&#10;                                            ).show()&#10;                                        }&#10;                                    )&#10;                                } else {&#10;                                    navController.navigate(&quot;login&quot;)&#10;                                }&#10;                            },&#10;                            onRegisterClick = { navController.navigate(&quot;register&quot;) }&#10;                        )&#10;                    }&#10;&#10;                    composable(&quot;login&quot;) {&#10;                        Login(&#10;                            label1901 = &quot;Correo electrónico&quot;,&#10;                            // FUNCIONALIDAD DE TU COMPAÑERO: Login con keepSession&#10;                            onLogin = { correo, contrasena, keepSession -&gt;&#10;                                lifecycleScope.launch {&#10;                                    try {&#10;                                        val usuario = LoginController.loginUser(correo, contrasena)&#10;                                        if (usuario != null) {&#10;                                            usuarioLogueado = usuario&#10;&#10;                                            // FUNCIONALIDAD DE TU COMPAÑERO: Guardar sesión&#10;                                            if (keepSession) {&#10;                                                val userJsonToSave = gson.toJson(usuario)&#10;                                                sharedPreferences.edit {&#10;                                                    putString(&quot;usuario&quot;, userJsonToSave)&#10;                                                }&#10;                                            } else {&#10;                                                sharedPreferences.edit { remove(&quot;usuario&quot;) }&#10;                                            }&#10;&#10;                                            Toast.makeText(&#10;                                                this@MainActivity,&#10;                                                &quot;Login exitoso: ${usuario.nombre}&quot;,&#10;                                                Toast.LENGTH_LONG&#10;                                            ).show()&#10;                                            Log.d(&quot;MainActivity&quot;, &quot;Usuario: $usuario&quot;)&#10;                                            navController.navigate(&quot;inicio&quot;) {&#10;                                                popUpTo(&quot;start&quot;) { inclusive = true }&#10;                                            }&#10;                                        } else {&#10;                                            Toast.makeText(&#10;                                                this@MainActivity,&#10;                                                &quot;Error en el login&quot;,&#10;                                                Toast.LENGTH_LONG&#10;                                            ).show()&#10;                                            Log.d(&quot;MainActivity&quot;, &quot;Error en el login&quot;)&#10;                                        }&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;LoginError&quot;, &quot;Excepción durante el login: ${e.message}&quot;)&#10;                                        Toast.makeText(&#10;                                            this@MainActivity,&#10;                                            &quot;Error de conexión&quot;,&#10;                                            Toast.LENGTH_LONG&#10;                                        ).show()&#10;                                    }&#10;                                }&#10;                            },&#10;                            navController = navController&#10;                        )&#10;                    }&#10;&#10;                    composable(&quot;inicio&quot;) {&#10;                        Inicio(&#10;                            usuario = usuarioLogueado, // FUNCIONALIDAD DE TU COMPAÑERO&#10;                            // TU FUNCIONALIDAD: Navegación a notificaciones&#10;                            onNavigateToNotifications = {&#10;                                navController.navigate(&quot;notifications&quot;)&#10;                            },&#10;                            onNavigateToConfig = {&#10;                                navController.navigate(&quot;configuracion&quot;)&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    // TU FUNCIONALIDAD: Sistema de notificaciones&#10;                    composable(&quot;notifications&quot;) {&#10;                        val notifications = Notifications()&#10;                        notifications.Notificaciones(&#10;                            onBackClick = {&#10;                                navController.popBackStack()&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    composable(&quot;register&quot;) {&#10;                        Register(navController = navController)&#10;                    }&#10;&#10;                    composable(&quot;configuracion&quot;) {&#10;                        com.narmocorp.satorispa.views.Configuracion(&#10;                            usuario = usuarioLogueado&#10;                            // Puedes agregar otros callbacks si los usas&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.narmocorp.satorispa&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.runtime.*&#10;import androidx.biometric.BiometricManager&#10;import androidx.biometric.BiometricManager.Authenticators.BIOMETRIC_STRONG&#10;import androidx.biometric.BiometricManager.Authenticators.DEVICE_CREDENTIAL&#10;import androidx.biometric.BiometricPrompt&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.content.edit&#10;import androidx.fragment.app.FragmentActivity&#10;import androidx.lifecycle.lifecycleScope&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.google.gson.Gson&#10;import com.narmocorp.satorispa.controllers.LoginController&#10;import com.narmocorp.satorispa.models.Usuario&#10;import com.narmocorp.satorispa.ui.theme.SATORISPATheme&#10;import com.narmocorp.satorispa.views.Inicio&#10;import com.narmocorp.satorispa.views.Login&#10;import com.narmocorp.satorispa.views.StartScreen&#10;import com.narmocorp.satorispa.views.Notifications&#10;import com.narmocorp.satorispa.views.Register&#10;import kotlinx.coroutines.launch&#10;import java.util.concurrent.Executor&#10;&#10;class MainActivity : FragmentActivity() {&#10;&#10;    private lateinit var executor: Executor&#10;&#10;    private fun showBiometricPrompt(&#10;        onSuccess: (BiometricPrompt.AuthenticationResult) -&gt; Unit,&#10;        onError: (Int, CharSequence) -&gt; Unit,&#10;        onFailed: () -&gt; Unit&#10;    ) {&#10;        val biometricManager = BiometricManager.from(this)&#10;        if (biometricManager.canAuthenticate(BIOMETRIC_STRONG or DEVICE_CREDENTIAL) != BiometricManager.BIOMETRIC_SUCCESS) {&#10;            onError(-1, &quot;No hay hardware de biometría disponible&quot;)&#10;            return&#10;        }&#10;&#10;        val promptInfo = BiometricPrompt.PromptInfo.Builder()&#10;            .setTitle(&quot;Inicio de sesión biométrico&quot;)&#10;            .setSubtitle(&quot;Inicia sesión con tu huella digital&quot;)&#10;            .setNegativeButtonText(&quot;Usar contraseña&quot;)&#10;            .build()&#10;&#10;        val biometricPrompt = BiometricPrompt(this, executor,&#10;            object : BiometricPrompt.AuthenticationCallback() {&#10;                override fun onAuthenticationError(errorCode: Int, errString: CharSequence) {&#10;                    super.onAuthenticationError(errorCode, errString)&#10;                    onError(errorCode, errString)&#10;                }&#10;&#10;                override fun onAuthenticationSucceeded(result: BiometricPrompt.AuthenticationResult) {&#10;                    super.onAuthenticationSucceeded(result)&#10;                    onSuccess(result)&#10;                }&#10;&#10;                override fun onAuthenticationFailed() {&#10;                    super.onAuthenticationFailed()&#10;                    onFailed()&#10;                }&#10;            })&#10;&#10;        biometricPrompt.authenticate(promptInfo)&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        executor = ContextCompat.getMainExecutor(this)&#10;&#10;        val sharedPreferences = getSharedPreferences(&quot;SatoriSPA_prefs&quot;, Context.MODE_PRIVATE)&#10;        val gson = Gson()&#10;        val userJson = sharedPreferences.getString(&quot;usuario&quot;, null)&#10;        val savedUser = userJson?.let { gson.fromJson(it, Usuario::class.java) }&#10;&#10;        setContent {&#10;            SATORISPATheme {&#10;                val navController = rememberNavController()&#10;                var usuarioLogueado by remember { mutableStateOf(savedUser) }&#10;&#10;                NavHost(&#10;                    navController = navController,&#10;                    startDestination = &quot;start&quot;,&#10;                ) {&#10;                    composable(&quot;start&quot;) {&#10;                        StartScreen(&#10;                            onLoginClick = {&#10;                                // FUNCIONALIDAD DE TU COMPAÑERO: Biometría si ya hay usuario guardado&#10;                                if (usuarioLogueado != null) {&#10;                                    showBiometricPrompt(&#10;                                        onSuccess = { _ -&gt;&#10;                                            navController.navigate(&quot;inicio&quot;) {&#10;                                                popUpTo(&quot;start&quot;) { inclusive = true }&#10;                                            }&#10;                                        },&#10;                                        onError = { errorCode, errString -&gt;&#10;                                            Log.d(&quot;BiometricError&quot;, &quot;Code: $errorCode, Msg: $errString&quot;)&#10;                                            navController.navigate(&quot;login&quot;)&#10;                                        },&#10;                                        onFailed = {&#10;                                            Toast.makeText(&#10;                                                this@MainActivity,&#10;                                                &quot;Huella no reconocida&quot;,&#10;                                                Toast.LENGTH_SHORT&#10;                                            ).show()&#10;                                        }&#10;                                    )&#10;                                } else {&#10;                                    navController.navigate(&quot;login&quot;)&#10;                                }&#10;                            },&#10;                            onRegisterClick = { navController.navigate(&quot;register&quot;) }&#10;                        )&#10;                    }&#10;&#10;                    composable(&quot;login&quot;) {&#10;                        Login(&#10;                            label1901 = &quot;Correo electrónico&quot;,&#10;                            // FUNCIONALIDAD DE TU COMPAÑERO: Login con keepSession&#10;                            onLogin = { correo, contrasena, keepSession -&gt;&#10;                                lifecycleScope.launch {&#10;                                    try {&#10;                                        val usuario = LoginController.loginUser(correo, contrasena)&#10;                                        if (usuario != null) {&#10;                                            usuarioLogueado = usuario&#10;&#10;                                            // FUNCIONALIDAD DE TU COMPAÑERO: Guardar sesión&#10;                                            if (keepSession) {&#10;                                                val userJsonToSave = gson.toJson(usuario)&#10;                                                sharedPreferences.edit {&#10;                                                    putString(&quot;usuario&quot;, userJsonToSave)&#10;                                                }&#10;                                            } else {&#10;                                                sharedPreferences.edit { remove(&quot;usuario&quot;) }&#10;                                            }&#10;&#10;                                            Toast.makeText(&#10;                                                this@MainActivity,&#10;                                                &quot;Login exitoso: ${usuario.nombre}&quot;,&#10;                                                Toast.LENGTH_LONG&#10;                                            ).show()&#10;                                            Log.d(&quot;MainActivity&quot;, &quot;Usuario: $usuario&quot;)&#10;                                            navController.navigate(&quot;inicio&quot;) {&#10;                                                popUpTo(&quot;start&quot;) { inclusive = true }&#10;                                            }&#10;                                        } else {&#10;                                            Toast.makeText(&#10;                                                this@MainActivity,&#10;                                                &quot;Error en el login&quot;,&#10;                                                Toast.LENGTH_LONG&#10;                                            ).show()&#10;                                            Log.d(&quot;MainActivity&quot;, &quot;Error en el login&quot;)&#10;                                        }&#10;                                    } catch (e: Exception) {&#10;                                        Log.e(&quot;LoginError&quot;, &quot;Excepción durante el login: ${e.message}&quot;)&#10;                                        Toast.makeText(&#10;                                            this@MainActivity,&#10;                                            &quot;Error de conexión&quot;,&#10;                                            Toast.LENGTH_LONG&#10;                                        ).show()&#10;                                    }&#10;                                }&#10;                            },&#10;                            navController = navController&#10;                        )&#10;                    }&#10;&#10;                    composable(&quot;inicio&quot;) {&#10;                        Inicio(&#10;                            usuario = usuarioLogueado, // FUNCIONALIDAD DE TU COMPAÑERO&#10;                            // TU FUNCIONALIDAD: Navegación a notificaciones&#10;                            onNavigateToNotifications = {&#10;                                navController.navigate(&quot;notifications&quot;)&#10;                            },&#10;                            onNavigateToConfig = {&#10;                                navController.navigate(&quot;configuracion&quot;)&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    // TU FUNCIONALIDAD: Sistema de notificaciones&#10;                    composable(&quot;notifications&quot;) {&#10;                        val notifications = Notifications()&#10;                        notifications.Notificaciones(&#10;                            onBackClick = {&#10;                                navController.popBackStack()&#10;                            }&#10;                        )&#10;                    }&#10;&#10;                    composable(&quot;register&quot;) {&#10;                        Register(navController = navController)&#10;                    }&#10;&#10;                    composable(&quot;configuracion&quot;) {&#10;                        com.narmocorp.satorispa.views.Configuracion(&#10;                            usuario = usuarioLogueado&#10;                            // Puedes agregar otros callbacks si los usas&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>